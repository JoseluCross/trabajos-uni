package juego.textui;

import juego.util.ConversorJugada;
import juego.util.CoordenadasIncorrectasException;

import java.util.Scanner;

import juego.control.Arbitro;
import juego.control.ArbitroInestable;
import juego.control.ArbitroInestableOptimizado;
import juego.modelo.*;

/**
 * Ejecución del juego Inestable desde CLI.
 *
 * @author José Luis Garrido Labrador
 * @author José Miguel Ramírez Sanz
 * @since 1.0
 * @version 2.0
 */
public class Inestable {
	// Constantes
	/**
	 * Número de argumentos máximos soportados por el programa.
	 */
	private static final int MAX_NUMS_OF_ARGUMENTS = 6;
	/**
	 * Número mínimo de argumentos soportados por el programa.
	 */
	private static final int MIN_NUMS_OF_ARGUMENTS = 0;
	/**
	 * Tamaño por defecto del tablero;
	 */
	private static final int DEFAULT_SIZE = 5;
	/**
	 * Cantidad de argumentos pasados por parámetro para mostrar información al usuario;
	 */
	private static final int INFO_ARGUMETS = 1;

	/**
	 * Nombre de los jugadores.
	 */
	private static String player1 = "Rojas", player2 = "Azules";
	/**
	 * Número de filas.
	 */
	private static int primero = DEFAULT_SIZE;
	/**
	 * Número de columnas.
	 */
	private static int segundo = DEFAULT_SIZE;
	/**
	 * Arbitro del juego.
	 */
	private static Arbitro arbitro;
	/**
	 * Tablero, false = clasico, true = especial
	 */
	private static boolean tableroTipo;
	/**
	 * Arbitro, false = clasico, true = optimizado
	 */
	private static boolean arbitroTipo;
	/**
	 * Captura de datos.
	 */
	private static Scanner scan = new Scanner(System.in);

	/**
	 * Programa principal por linea de comandos.
	 *
	 * @param args
	 *            argumentos pasados por teclado
	 */
	public static void main(String[] args) {
		try {
			comprobacion(args);
			if (args.length != INFO_ARGUMETS) {// No se ha llamado a la versión o a la ayuda
				do {
					jugar();
					generaArbitro();
				} while (seguirJugando());
			}
		} catch (RuntimeException e) {
			System.err.println(e.getMessage());
		} finally {
			scan.close();
		}
	}

	/**
	 * Procedimiento para jugar.
	 */
	private static void jugar() {
		// Condición necesaria para poder jugar
		assert !arbitro.estaAcabado() : "No se puede llamar a jugar si el juego esta acabado";

		// Ganador y Celda de la jugada
		Jugador ganador;
		Celda celda;
		mensajeBienvenida(); // Recibimos a los jugadores
		do {
			System.out.println(tablero()); // Imprimimos el tablero
			do {
				// Anunciamos el turno
				System.out.print("El el turno de " + arbitro.obtenerTurno().obtenerJugadorConTurno().obtenerNombre()
						+" ("+ arbitro.obtenerTurno().obtenerJugadorConTurno().obtenerColor().toChar() +")"+ "\nIntroduzca su jugada: ");
				// Capturamos la jugada realizada
				celda = capturarJugada();
			} while (celda == null); // Mientras la celda no este en el tablero
										// o sea incorrecta se sigue pidiendo
										// los datos
			if (arbitro.esMovimientoLegal(celda)) { // Comprobamos si es legal
				arbitro.jugar(celda); // Jugamos
				ganador = arbitro.obtenerGanador(); // Comprobamos si hay
													// ganador
			} else {
				System.err.println("Movimiento ilegal"); // Se dice que es
															// ilegal
				ganador = null; // Se anula el ganador
			}
		} while (ganador == null); // Mientras no haya ganador
		// Se anuncia el ganador
		System.out.println(tablero() + "\nEl ganador es: " + ganador.obtenerNombre() + ". Felicidades");
	}

	/**
	 * Lee desde el teclado la celda seleccionada.
	 *
	 * @return La celda metida por teclado
	 */
	private static Celda capturarJugada() {
		Celda cell = null;
		while (true) { // Se repetirá indefinidamente hasta que el dato sea
						// correcto
			try {
				String value = scan.nextLine();
				cell = ConversorJugada.convertir(value, arbitro.obtenerTablero());
				return cell;
			} catch (CoordenadasIncorrectasException e) {
				System.err.println("Coordenadas incorrectas");
			} // Try Catch
		} // While
	}

	/**
	 * Recibimos a los jugadores.
	 */
	private static void mensajeBienvenida() {
		System.out.println("Bienvenidos " + arbitro.obtenerTurno().obtenerJugadorConTurno().obtenerNombre() + " y "
				+ arbitro.obtenerTurno().obtenerJugadorSinTurno().obtenerNombre());
		System.out.println("Poned vuestro temple al límite y que gane el mejor");
	}

	/**
	 * Recorremos el tablero y creamos una cadena con la información del juego.
	 *
	 * @return cadena con el tablero
	 */
	private static String tablero() {
		Tablero tablero = arbitro.obtenerTablero();
		String texto = "";
		for (int i = 0; i < tablero.obtenerNumeroFilas(); i++) {
			for (int j = 0; j < tablero.obtenerNumeroColumnas(); j++) {
				try {
					if (j == 0)
						texto += i + "\t";
					if (!tablero.obtenerCelda(i, j).esOcupable())
						texto += " || ";
					else if (tablero.obtenerCelda(i, j).estaVacia()) {
						texto += " -- ";
					} else {
						texto += " " + tablero.obtenerCelda(i, j).obtenerAtomo().obtenerColor().toChar()
								+ tablero.obtenerCelda(i, j).obtenerAtomo().obtenerCarga() + " ";
					}
				} catch (CoordenadasIncorrectasException e) {
					throw new RuntimeException("Error capturando la coordenada en " + i + " " + j, e);
				}
			}
			texto += "\n";
		}
		texto += "  \t";
		char caracter = '\u0061';
		for (int i = 0; i < tablero.obtenerNumeroColumnas(); i++) {
			texto += " " + caracter + "  ";
			caracter++;
		}
		return texto;

	}

	/**
	 * Genera un árbitro según las condiciones pasadas por parámetro.
	 */
	private static void generaArbitro() {
		Tablero tableroTemp;
		Jugador playerOne = new Jugador(player1, Color.ROJO);
		Jugador playerTwo = new Jugador(player2, Color.AZUL);
		if (tableroTipo)
			tableroTemp = new TableroEspecial(primero, segundo);
		else
			tableroTemp = new Tablero(primero, segundo);

		if (arbitroTipo)
			arbitro = new ArbitroInestableOptimizado(tableroTemp, playerOne, playerTwo);
		else
			arbitro = new ArbitroInestable(tableroTemp, playerOne, playerTwo);
	}

	/**
	 * Comprobamos que los argumentos pasados por parametros son correctos.
	 *
	 * @param argumentos
	 *            argumentos pasador por teclado
	 */
	private static void comprobacion(String[] argumentos) {
		switch (argumentos.length) {
		case MAX_NUMS_OF_ARGUMENTS:
			if (argumentos[MAX_NUMS_OF_ARGUMENTS-1].equals("especial"))
				tableroTipo = true;
			else if (!argumentos[5].equals("clasico"))
				error();

			if (argumentos[4].equals("optimizado"))
				arbitroTipo = true;
			else if (!argumentos[4].equals("clasico"))
				error();

			try {
				primero = Integer.parseInt(argumentos[2]);
				segundo = Integer.parseInt(argumentos[3]);
			} catch (NumberFormatException e) {
				error();
			}

			player1 = argumentos[0];
			player2 = argumentos[1];

		case MIN_NUMS_OF_ARGUMENTS:
			generaArbitro();
			break;
		// Para evitar copias dejamos estas 2 opciones
		case INFO_ARGUMETS:
			if (argumentos[0].equals("-v") || argumentos[0].equals("--version"))
				info();
			else if (argumentos[0].equals("-h") || argumentos[0].equals("--help"))
				help();
			else
				error();
			break;
		default:
			error();
		}
	}

	/**
	 * Imprime mensaje de error cuando los argumentos son incorrectos.
	 *
	 * @throws RuntimeException
	 *             Excepción para ser capturado por el main y terminar la
	 *             ejecucuión.
	 */
	private static void error() throws RuntimeException {
		help();
		throw new RuntimeException("");
	}

	/**
	 * Imprime la información de los autores.
	 */
	private static void info() {
		System.out.println("\u00a9 2016 - Escuela Polítecnica Superior - Universidad de Burgos"
				+ "\nProfesor: Raúl Marticorena Sánchez"
				+ "\nAulumnos: José Luis Garrido Labrador y José Miguel Ramírez Sanz" + "\nVersión: 2.0"
				+ "\nLicencia - GPLv3\n");
	}

	/**
	 * Muestra la ayuda.
	 */
	private static void help() {
		System.out.println("Inestable - textui\n" + "----------------------\n" + "Sintaxis:\n"
				+ "\tejecutar_textui.sh [Jugador1 Jugador2 filas columnas arbitro tablero]\n"
				+ "----------------------\n" + "Detalles:\n"
				+ "\tfilas y columnas han de ser números enteros entre 5 y 9\n"
				+ "\tLas opciones de árbitro son: \"clasico\" u \"optimizado\"\n"
				+ "\tLas opciones de tablero son: \"clasico\" o \"especial\"\n" + "\tLas opciones pueden no ponerse\n"
				+ "Otras opciones:\n" + "\t -h, --help		Muestra esta ayuda\n"
				+ "\t -v, --version		Muestra la versión y la información del programa\n");
	}

	/**
	 * Pregunta al usuario si quiere seguir jugando.
	 *
	 * @return true si quiere seguir jugando, false si no
	 */
	private static boolean seguirJugando() {
		do {
			System.out.print("Quieres jugar una nueva partida: [s]i,[n]o ");
			String respuesta = scan.nextLine().toLowerCase();
			if (respuesta.equals("s"))
				return true;
			else if (respuesta.equals("n"))
				return false;
			else
				System.err.println("Respuesta incorrecta");
		} while (true);
	}

}
