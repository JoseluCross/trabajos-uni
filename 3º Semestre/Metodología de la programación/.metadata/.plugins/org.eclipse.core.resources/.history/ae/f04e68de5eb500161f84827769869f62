package juego.textui;

import juego.util.ConversorJugada;
import juego.util.CoordenadasIncorrectasException;

import java.util.Scanner;

import juego.control.Arbitro;
import juego.control.ArbitroInestable;
import juego.control.ArbitroInestableOptimizado;
import juego.modelo.*;

/**
 * Ejecución del juego Inestable desde CLI.
 * 
 * @author José Luis Garrido Labrador
 * @author José Miguel Ramírez Sánz
 * @since 1.0
 * @version 2.0
 */
public class Inestable {
	//Constantes
	/*Preguntar que constantes*/
	
	/**
	 * Nombre de los jugadores.
	 */
	private static String player1, player2;
	/**
	 * dimensiones del tablero.
	 */
	private static int primero, segundo;
	/**
	 * Arbitro del juego.
	 */
	private static Arbitro arbitro;
	/**
	 * Captura de datos.
	 */
	private static Scanner scan = new Scanner(System.in);

	/**
	 * Programa principal por linea de comandos.
	 * 
	 * @param args
	 *            argumentos pasados por teclado
	 */
	public static void main(String[] args) {
		try {
			comprobacion(args);
			if(args.length!=1)//No se ha llamado a la versión o a la ayuda
				jugar();
		} catch (RuntimeException e) {
			scan.close();
			System.err.println(e.getMessage());
		}
	}

	/**
	 * Procedimiento para jugar.
	 */
	private static void jugar() {
		// Ganador y Celda de la jugada
		Jugador ganador;
		Celda celda;
		mensajeBienvenida(); // Recibimos a los jugadores
		do {
			System.out.println(tablero()); // Imprimimos el tablero
			do {
				// Anunciamos el turno
				System.out.print("El el turno de " + arbitro.obtenerTurno().obtenerJugadorConTurno().obtenerNombre()
						+ "\nIntroduzca su jugada: ");
				// Capturamos la jugada realizada
				celda = capturarJugada();
			} while (celda == null); // Mientras la celda no este en el tablero
										// o sea incorrecta se sigue pidiendo
										// los datos
			if (arbitro.esMovimientoLegal(celda)) { // Comprobamos si es legal
				arbitro.jugar(celda); // Jugamos
				ganador = arbitro.obtenerGanador(); // Comprobamos si hay
													// ganador
			} else {
				System.err.println("Movimiento ilegal"); // Se dice que es
															// ilegal
				ganador = null; // Se anula el ganador
			}
		} while (ganador == null); // Mientras no haya ganador
		// Se anuncia el ganador
		System.out.println(tablero() + "\nEl ganador es: " + ganador.obtenerNombre() + ". Felicidades");
		scan.close();// Cerramos el scanner
	}

	/**
	 * Lee desde el teclado la celda seleccionada.
	 * 
	 * @return La celda metida por teclado
	 */
	private static Celda capturarJugada() {
		Celda cell = null;
		while (true) { // Se repetirá indefinidamente hasta que el dato sea
						// correcto
			try {
				String value = scan.nextLine();
				cell = ConversorJugada.convertir(value, arbitro.obtenerTablero());
				return cell;
			} catch (CoordenadasIncorrectasException e) {
				System.err.println("Coordenadas incorrectas");
			} // Try Catch
		} // While
	}

	/**
	 * Recibimos a los jugadores.
	 */
	private static void mensajeBienvenida() {
		System.out.println("Bienvenidos " + arbitro.obtenerTurno().obtenerJugadorConTurno().obtenerNombre() + " y "
				+ arbitro.obtenerTurno().obtenerJugadorSinTurno().obtenerNombre());
		System.out.println("Poned vuestro temple al límite y que gane el mejor");
	}

	/**
	 * Recorremos el tablero y creamos una cadena con la información del juego.
	 * 
	 * @return cadena con el tablero
	 */
	private static String tablero() {
		Tablero tablero = arbitro.obtenerTablero();
		String texto = "";
		for (int i = 0; i < tablero.obtenerNumeroFilas(); i++) {
			for (int j = 0; j < tablero.obtenerNumeroColumnas(); j++) {
				try {
					if (j == 0)
						texto += i + "\t";
					if (!tablero.obtenerCelda(i, j).esOcupable())
						texto += " || ";
					else if (tablero.obtenerCelda(i, j).estaVacia()) {
						texto += " -- ";
					} else {
						texto += " " + tablero.obtenerCelda(i, j).obtenerAtomo().obtenerColor().toChar()
								+ tablero.obtenerCelda(i, j).obtenerAtomo().obtenerCarga() + " ";
					}
				} catch (CoordenadasIncorrectasException e) {
					throw new RuntimeException("Error capturando la coordenada en " + i + " " + j, e);
				}
			}
			texto += "\n";
		}
		texto += "  \t";
		char caracter = '\u0061';
		for (int i = 0; i < tablero.obtenerNumeroColumnas(); i++) {
			texto += " " + caracter + "  ";
			caracter++;
		}
		return texto;

	}

	/**
	 * Comprobamos que los argumentos pasados por parametros son correctos.
	 * 
	 * @param argumentos
	 *            argumentos pasador por teclado
	 */
	private static void comprobacion(String[] argumentos) {
		boolean arb = false, tabl = false; // Arbitro y tablero clasicos por
											// defecto
		primero = 5;
		segundo = 5; // Por defecto las dimensiones son 5
		player1 = "ROJAS";
		player2 = "AZULES"; // Por defecto los jugadores no tienen nombres
		switch (argumentos.length) {
		case 6:
			if (argumentos[5].equals("especial"))
				tabl = true;
			else if (argumentos[5].equals("clasico"))
				error();

			if (argumentos[4].equals("optimizado"))
				arb = true;
			else if (argumentos[4].equals("clasico"))
				error();
			
			try {
				primero = Integer.parseInt(argumentos[2]);
				segundo = Integer.parseInt(argumentos[3]);
			} catch (NumberFormatException e) {
				error();
			}
			
			player1 = argumentos[0];
			player2 = argumentos[1];
			
		case 0:
			Tablero tablero;
			if (tabl)
				tablero = new TableroEspecial(primero, segundo);
			else
				tablero = new Tablero(primero, segundo);

			if (arb)
				arbitro = new ArbitroInestableOptimizado(tablero, new Jugador(player1, Color.ROJO),
						new Jugador(player2, Color.AZUL));
			else
				arbitro = new ArbitroInestable(tablero, new Jugador(player1, Color.ROJO),
						new Jugador(player2, Color.AZUL));
			break;
		//Para evitar copias dejamos estas 2 opciones
		case 1:
			if(argumentos[0].equals("-v") || argumentos[0].equals("--version"))
				info();
			else if(argumentos[0].equals("-h") || argumentos[0].equals("--help"))
				help();
			else
				error();
			break;
		default:
			error();
		}
	}

	/**
	 * Imprime mensaje de error cuando los argumentos son incorrectos.
	 * 
	 * @throws RuntimeException
	 *             Excepción con la información de los datos necesarios
	 */
	private static void error() throws RuntimeException {
		throw new RuntimeException("Los datos introducidos son incorrectos\n" + "Compruebe los siguientes casos:\n"
				+ "\tQue no haya metido argumentos.\n" + "\tHaya metido solo 2 cadenas.\n"
				+ "\tHaya metido 2 cadenas y 2 numeros entre 5 y 9.\n"
				+ "\tHaya metido 2 cadenas, 2 numeros entre 5 y 9 y 2 cadenas, una para el árbitro \"clasico\" u \"optimizado\" y otra para el tablero \"clasico\" o \"especial\"\n"
				+ "\nEjemplo:\n" + "\tjava juego.textui.Inestable Pepe Juan 5 6 clasico clasico\n");
	}
	
	/**
	 * Imprime la información de los autores.
	 */
	private static void info(){
		System.out.println("\u00a9 2016 - Escuela Polítecnica Superior - Universidad de Burgos"
				+ "\nProfesor: Raúl Marticorena Sánchez"
				+ "\nAulumnos: José Luis Garrido Labrador y José Miguel Ramírez Sanz"
				+ "\nVersión: 2.0"
				+ "\nLicencia - GPLv3\n");
	}
	
	/**
	 * Muestra la ayuda.
	 */
	private static void help(){
		System.out.println("Inestable - textui\n"
				+ "----------------------\n"
				+ "Sintaxis:\n"
				+ "\tejecutar_textui.sh [Jugador1 Jugador2 filas columnas arbitro tablero]\n"
				+ "----------------------\n"
				+ "Detalles:\n"
				+ "\tfilas y columnas han de ser números enteros entre 5 y 9\n"
				+ "\tLas opciones de árbitro son: \"clasico\" u \"optimizado\"\n"
				+ "\tLas opciones de tablero son: \"clasico\" o \"especial\"\n"
				+ "\tLas opciones pueden no ponerse\n"
				+ "Otras opciones:\n"
				+ "\t -h, --help		Muestra esta ayuda\n"
				+ "\t -v, --version		Muestra la versión y la información del programa\n");
	}
	

}
